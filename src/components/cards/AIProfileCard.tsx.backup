import { useState, useEffect } from "react";
import AIService from "../../services/aiService";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import {
  faRobot,
  faRotate,
  faRocket,
  faExclamationTriangle,
} from "@fortawesome/free-solid-svg-icons";

interface AIProfileCardProps {
  userData: any;
}

// AI响应格式化函数
const formatAIResponse = (text: string): React.ReactNode => {
  // 提取思考内容和最终回答
  const extractThinkContent = (content: string): { thinking: string[], finalAnswer: string } => {
    // 使用正确的正则表达式匹配思考内容
    const thinkMatches = content.match(/<think>[\\s\\S]*?<\\/think>/gi) || [];
    const thinking = thinkMatches.map(match => 
      match.replace(/<\\/?think>/gi, '').trim()
    ).filter(t => t);
    
    // 移除所有 <think> 标签及其内容，获取最终回答
    const finalAnswer = content.replace(/<think>[\\s\\S]*?<\\/think>/gi, '').trim();
    
    return { thinking, finalAnswer };
  };

  const { thinking, finalAnswer } = extractThinkContent(text);
  const lines = finalAnswer.split('\n').filter(line => line.trim());<think>([\s\S]*?)<\/think>/gi) || [];
    const thinking = thinkMatches.map(match => 
      match.replace(/<\/?think>/gi, '').trim()
    ).filter(t => t);
    
    // 移除所有 <think> 标签及其内容，获取最终回答
    const finalAnswer = content.replace(/<think>[\s\S]*?<\/think>/gi, '').trim();
    
    return { thinking, finalAnswer };
  };

  const { thinking, finalAnswer } = extractThinkContent(text);<think>([\s\S]*?)<\/think>/gi) || [];
    const thinking = thinkMatches.map(match => 
      match.replace(/<\/?think>/gi, '').trim()
    ).filter(t => t);
    
    // 移除所有 <think> 标签及其内容，获取最终回答
    const finalAnswer = content.replace(/<think>[\s\S]*?<\/think>/gi, '').trim();
    
    return { thinking, finalAnswer };
  };<think>([\s\S]*?)<\/think>/gi) || [];
    const thinking = thinkMatches.map(match => 
      match.replace(/<\/?think>/gi, '').trim()
    ).filter(t => t);
    
    // 移除所有 <think> 标签及其内容，获取最终回答
    const finalAnswer = content.replace(/<think>[\s\S]*?<\/think>/gi, '').trim();
    
    return { thinking, finalAnswer };
  };<think>([\s\S]*?)<\/think>/gi) || [];
    const thinking = thinkMatches.map(match => 
      match.replace(/<\/?think>/gi, '').trim()
    ).filter(t => t);
    
    // 移除所有 <think> 标签及其内容，获取最终回答
    const finalAnswer = content.replace(/<think>[\s\S]*?<\/think>/gi, '').trim();
    
    return { thinking, finalAnswer };
  };

  const { thinking, finalAnswer } = extractThinkContent(text);
  const lines = finalAnswer.split('\n').filter(line => line.trim());
  
  const formatLines = lines.map((line, index) => {
    // 检测标题模式
    if (line.match(/^[#*•▪▪◦›➢➤⦿]\s+/) || line.match(/^【.*】/) || line.match(/^[A-Za-z\d]+\.\s/)) {
      return (
        <div key={index} className="mb-2">
          <span className="font-semibold text-violet-300 bg-violet-500/10 px-2 py-1 rounded-lg border border-violet-400/20 inline-block">
            {line.replace(/^[#*•▪▪◦›➢➤⦿]\s+/, '').replace(/^【(.*)】/, '$1')}
          </span>
        </div>
      );
    }
    
    // 检测关键信息模式（包含冒号）
    if (line.includes('：') || line.includes(':')) {
      const parts = line.split(/[：:]/);
      if (parts.length >= 2) {
        return (
          <div key={index} className="mb-2 flex items-start">
            <span className="font-medium text-amber-300 min-w-[80px] mr-2">
              {parts[0]}：
            </span>
            <span className="text-white/90 flex-1">
              {parts.slice(1).join(':')}
            </span>
          </div>
        );
      }
    }
    
    // 普通段落
    return (
      <div key={index} className="mb-3 text-white/80 leading-6">
        {line}
      </div>
    );
  });

  // 返回完整的格式化内容，包括思考过程和最终回答
  return (
    <div className="space-y-4">
      {/* 思考过程区域 */}
      {thinking.length > 0 && (
        <div className="bg-violet-500/5 border border-violet-400/20 rounded-xl p-4">
          <div className="flex items-center mb-3">
            <FontAwesomeIcon 
              icon={faRobot} 
              className="text-violet-400 mr-2 text-sm" 
            />
            <span className="text-violet-300 text-sm font-medium">AI 思考过程</span>
            <div className="flex-1 ml-3 h-px bg-gradient-to-r from-violet-400/30 to-transparent"></div>
          </div>
          <div className="space-y-2">
            {thinking.map((thinkContent, index) => (
              <div key={index} className="text-violet-100/90 text-xs leading-relaxed bg-violet-500/10 rounded-lg p-3 border-l-2 border-violet-400/40">
                <div className="whitespace-pre-wrap font-mono">
                  {thinkContent}
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* 最终回答区域 */}
      {finalAnswer && (
        <div className="bg-white/5 border border-violet-400/20 rounded-xl p-4">
          <div className="flex items-center mb-3">
            <div className="w-2 h-2 bg-violet-400 rounded-full mr-2 animate-pulse"></div>
            <span className="text-violet-300 text-sm font-medium">分析结果</span>
            <div className="flex-1 ml-3 h-px bg-gradient-to-r from-violet-400/30 to-transparent"></div>
          </div>
          <div className="space-y-2">
            {formatLines}
          </div>
        </div>
      )}
    </div>
  );
};

export const AIProfileCard = ({ userData }: AIProfileCardProps) => {
  const [profile, setProfile] = useState<string>("");
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string>("");
  const [displayedProfile, setDisplayedProfile] = useState<string>(""); // 用于逐字显示的状态

  // 逐字显示效果
  useEffect(() => {
    if (!profile) {
      setDisplayedProfile("");
      return;
    }

    let index = 0;
    setDisplayedProfile(""); // 重置显示内容
    
    const timer = setInterval(() => {
      if (index < profile.length) {
        setDisplayedProfile(prev => prev + profile.charAt(index));
        index++;
      } else {
        clearInterval(timer);
      }
    }, 20); // 每20毫秒显示一个字符

    return () => clearInterval(timer);
  }, [profile]);

  // 调试：打印接收到的用户数据
  console.log("AIProfileCard 接收到的 userData:", userData);

  const generateProfile = async () => {
    console.log("generateProfile 被调用");
    console.log("用户数据:", userData);

    setLoading(true);
    setError("");
    setProfile(""); // 清空之前的内容

    try {
      console.log("开始调用 AI 服务...");

      // 使用流式响应，实时更新内容
      const result = await AIService.generateUserProfile(
        userData,
        (chunk: string) => {
          setProfile((prev) => prev + chunk);
        },
      );

      console.log("AI 服务完整响应:", result);
      setProfile(result); // 确保最终内容完整
    } catch (err) {
      setError("生成用户画像失败，请稍后重试");
      console.error("AI Profile generation error:", err);
    } finally {
      setLoading(false);
    }
  };

  const handleRefresh = () => {
    setProfile("");
    setError("");
    generateProfile();
  };

  return (
    <div className="h-full w-full flex flex-col p-6 text-white rounded-3xl glass-card-violet shadow-2xl">
      <div className="flex flex-col flex-1 min-h-0">
        <div className="flex items-center justify-between mb-4 flex-shrink-0">
          <h3 className="text-xl font-extrabold text-white drop-shadow-sm flex items-center">
            <span className="w-3 h-3 bg-violet-400 rounded-full mr-3 animate-pulse shadow-lg"></span>
            AI 用户画像
          </h3>
          <div className="flex items-center space-x-2">
            <div className="flex items-center bg-violet-500/20 text-violet-100 px-3 py-1.5 rounded-full text-xs border border-violet-400/30 shadow-sm backdrop-blur-sm">
              <FontAwesomeIcon icon={faRobot} className="mr-1.5" />
              <span className="text-violet-100/90 font-mono mr-2">
                {new Date().toLocaleTimeString("zh-CN", {
                  hour: "2-digit",
                  minute: "2-digit",
                })}
              </span>
              <span className="text-white/80 text-xs font-medium">
                · AI 分析
              </span>
            </div>
            <button
              onClick={(e) => {
                e.preventDefault();
                e.stopPropagation();
                handleRefresh();
              }}
              onMouseDown={(e) => {
                e.stopPropagation();
              }}
              disabled={loading}
              className="p-2 rounded-full bg-violet-500/20 hover:bg-violet-500/30 border border-violet-400/30 transition-colors disabled:opacity-50"
              title="重新生成"
              style={{ pointerEvents: "auto" }}
            >
              <FontAwesomeIcon
                icon={faRotate}
                className={`text-sm ${loading ? "animate-spin" : ""}`}
              />
            </button>
          </div>
        </div>

        {/* AI 分析内容 */}
        <div className="flex flex-col flex-1 min-h-0">
          <div className="bg-white/5 rounded-xl p-4 flex-1 min-h-0 overflow-y-auto border border-violet-400/20">
            {error ? (
              <div className="flex items-center justify-center h-full">
                <div className="flex flex-col items-center space-y-3 text-center">
                  <FontAwesomeIcon
                    icon={faExclamationTriangle}
                    className="text-2xl text-yellow-400"
                  />
                  <span className="text-red-300 text-sm">{error}</span>
                  <button
                    onClick={(e) => {
                      e.preventDefault();
                      e.stopPropagation();
                      handleRefresh();
                    }}
                    onMouseDown={(e) => {
                      e.stopPropagation();
                    }}
                    className="px-4 py-2 bg-violet-500/20 hover:bg-violet-500/30 rounded-lg border border-violet-400/30 text-white text-sm transition-colors"
                    style={{ pointerEvents: "auto" }}
                  >
                    重试
                  </button>
                </div>
              </div>
            ) : displayedProfile ? (
              <div className="space-y-4">
                {/* 改进的AI响应显示 - 区分思考过程和最终回答 */}
                <div className="max-w-none">
                  <div className="text-white/90 text-sm leading-relaxed font-sans">
                    {formatAIResponse(displayedProfile)}
                    {loading && (
                      <div className="flex items-center mt-3 text-violet-300">
                        <span className="inline-block w-2 h-4 bg-violet-400 animate-pulse mr-2"></span>
                        <span className="text-xs">AI 正在思考...</span>
                      </div>
                    )}
                  </div>
                </div>

                {/* AI 标识 - 改进的标签样式 */}
                <div className="pt-4 border-t border-violet-400/20">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-2">
                      <span className="bg-gradient-to-r from-violet-600/30 to-purple-600/30 text-violet-200 px-3 py-1.5 rounded-full text-xs font-medium border border-violet-400/40 flex items-center">
                        <FontAwesomeIcon icon={faRobot} className="mr-1.5 text-violet-300" />
                        <span className="text-violet-100">DeepSeek AI</span>
                        <span className="w-1.5 h-1.5 bg-violet-400 rounded-full ml-2 animate-pulse"></span>
                      </span>
                      {loading && (
                        <span className="text-violet-300 text-xs font-medium bg-violet-500/20 px-2 py-1 rounded-full border border-violet-400/30">
                          生成中...
                        </span>
                      )}
                    </div>
                    <span className="text-white/60 text-xs">
                      {new Date().toLocaleDateString("zh-CN")}
                    </span>
                  </div>
                </div>
              </div>
            ) : loading ? (
              <div className="flex items-center justify-center h-full">
                <div className="flex flex-col items-center space-y-3">
                  <div className="w-8 h-8 border-2 border-violet-400 border-t-transparent rounded-full animate-spin"></div>
                  <span className="text-white/80 text-sm">
                    AI 正在分析用户画像...
                  </span>
                </div>
              </div>
            ) : (
              <div className="flex items-center justify-center h-full">
                <div className="flex flex-col items-center space-y-4 text-center">
                  <FontAwesomeIcon
                    icon={faRobot}
                    className="text-5xl mb-2 text-violet-400"
                  />
                  <h4 className="text-white font-bold text-lg">
                    AI 用户画像分析
                  </h4>
                  <p className="text-white/70 text-sm mb-4 max-w-xs">
                    点击下方按钮，让 AI 分析用户的行为模式、消费习惯和使用偏好
                  </p>
                  <button
                    onClick={(e) => {
                      e.preventDefault();
                      e.stopPropagation();
                      console.log("按钮被点击了！");
                      generateProfile();
                    }}
                    onMouseDown={(e) => {
                      e.stopPropagation();
                    }}
                    onMouseUp={(e) => {
                      e.stopPropagation();
                    }}
                    className="px-6 py-3 bg-violet-500/30 hover:bg-violet-500/40 rounded-lg border border-violet-400/50 text-white font-medium transition-all duration-200 shadow-lg hover:shadow-xl cursor-pointer"
                    style={{ pointerEvents: "auto" }}
                  >
                    <span className="flex items-center space-x-2">
                      <FontAwesomeIcon icon={faRocket} />
                      <span>生成 AI 画像</span>
                    </span>
                  </button>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};
